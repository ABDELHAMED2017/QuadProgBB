Do we already have DOI for our paper?

4. It never hurts to ship binaries.

5. In opt_dnn_compile, I interpreted the comment below as if I should
uncomment those lines. However, what I should do was to edit the c files
and remove the trailing underscores (at least that is what worked for
me)
%% Possible Windows variation
%% In Windows, do not append underscores to blas function names in .c files.
%% mex -O project.c C:\Progra~1\MATLAB\R2008a\extern\lib\win32\lcc\libmwlapack.lib C:\Progra~1\MATLAB\R2008a\extern\lib\win32\lcc\libmwblas.lib
% mex -largeArrayDims -I/user/biz/jieqchen/matlab/cplex110/include/ilcplex -L/user/biz/jieqchen/matlab/cplex110/lib/x86-64_sles9.0_3.3/static_pic cplexint.c -lcplex

==========================================================
  FINISHED
==========================================================

1. There are some tuning options in the code. You should allow them to
be set from outside, just as you can set max_time. Preferably via a
struct.

    - Add a struct 'options' to allow user to specify the following parameters:
    
      max_time       (86400)
      max_iter       (1000)
      tol            (1e-8)
      fathom_tol     (1e-6)
      use_quadprog   (1   )

    where values in () are default values.
    
    - Also added handling of missing input argument values.

   
2. The code displays a lot of stuff, including garbage (missing ; I
guess). There should be a possibility to control verbosity, such as 0
(completely silent), 1 (reasonable display, like the BNB and final info)
and 2 (everything, like now except the garbage)


  - what implemented is the following:

  0 : only final statust
  1 : status after each node
  2 : display node solve infor, every 100 iterations
  > 2 : display node solve infor, every 25 iterations

  - Also suppressed cplexlp output.

  - Changed code to prevent concatinating empty arrays.

  - Change 'quadprog' options as follows in order to prevent generating warning message
  
  quadopts = optimset('LargeScale','off','Display','off');

3. The code should return a numerical status flag (such as 0 means
solution computed, 1 means it was found infeasible, 2 stopped due to
max_time or max_iter )

  
   - added a new field value 'status' to the 'stat' struct, which is a string indicating the solution status:

    * optimal_solution
    * time_limit_exceede
    * infeasible_or_unbounded
    * numerical_issues_of_optdnn: if nodes_solved_poorly / nodes_solved > 0.3


